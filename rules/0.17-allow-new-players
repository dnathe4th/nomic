import util

def should_allow(pr):
  diff = pr.diff()
  if diff.modified_files or diff.removed_files:
    raise Exception('All file changes must be additions')

  if len(diff.added_files) > 1:
    raise Exception('Only one player can be added in a PR')

  added_file = diff.added_files[0]

  s_players, points_user, s_bonuses, bonus_name = added_file.path.split('/')
  if s_players != 'players' or s_bonuses != 'bonuses' or bonus_name != 'initial':
    raise Exception('Added file %s is not an initial bonus file' % added_file)

  if points_user in util.users():
    raise Exception('Cannot create an existing user')

  (diff_invocation_line, file_mode_line, _, removed_file_line,
   added_file_line, patch_location_line, file_delta_line,
   empty_line) = str(added_file).split('\n')

  if diff_invocation_line != 'diff --git a/%s b/%s' % (
      added_file.path, added_file.path):
    raise Exception('Unexpected diff invocation: %s' % diff_invocation_line)

  if file_mode_line != 'new file mode 100644':
    raise Exception('File added with incorrect mode: %s' % file_mode_line)

  if removed_file_line != '--- /dev/null':
    raise Exception(
      'Diff format makes no sense: added files should say they are from /dev/null')

  if added_file_line != '+++ b/%s' % added_file.path:
    raise Exception('Something wrong with file adding line: file is '
                    '%s but got %s' % (added_file.path, added_file_line))

  if patch_location_line != '@@ -0,0 +1,1 @@':
    raise Exception('Patch location makes no sense: %s' %
                    patch_location_line)

  if empty_line:
    raise Exception('Last line should be empty')

  if file_delta_line.startswith('+'):
    actual_file_delta = file_delta_line[1:]
  else:
    raise Exception('File delta missing initial + for addition: %s' %
                    file_delta_line)

  try:
    initial_bonus = int(actual_file_delta)
  except:
    raise Exception('File delta should contain a bonus (int) value')

  if initial_bonus < 0:
    raise Exception('Points cannot be negative')

  if initial_bonus > 10:
    raise Exception('%s initial points exceeds maximum starting value of 10 points' % initial_bonus)

  return True
